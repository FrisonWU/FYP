from sympy import *
import numpy as np
import math
class ProjectAndRotate:
    def __init__(self):
        self.pixel_x = 480
        self.pixel_y = 640
        self.span_x = 199# 280mm
        self.span_y = 375# 177mm
        self.D = 265  # Camera distance z = -475mm
        self.wx,self.wy,self.wz,self.q1,self.q2,self.q3,self.q4 = symbols('wx,wy,wz,q1,q2,q3,q4')
    def ProjectionMatrix(self):
        pixel_x = self.pixel_x
        pixel_y = self.pixel_y
        span_x = self.span_x
        span_y = self.span_y
        D = self.D
        Projection_Matrix = Matrix([[1, 0, 0, 0],
                                    [0, 1, 0, 0],
                                    [0, 0, 1, 1 / D],
                                    [0, 0, -D, 1]])
        Pixel_Transform_Matrix = Matrix([[pixel_x / span_x, 0, 0, 0],
                                         [0, pixel_y / span_y, 0, 0],
                                         [0, 0, 1, 0],
                                         [pixel_x / 2, pixel_y / 2, 0, 1]])
        Whole_Matrix = Projection_Matrix * Pixel_Transform_Matrix
        return Whole_Matrix
    def Quaternion(self):
        x,y,z,q1,q2,q3,q4 = self.wx,self.wy,self.wz,self.q1,self.q2,self.q3,self.q4
        Input_Matrix = Matrix([0, x, y, z])
        qmodel = q1 ** 2 + q2 ** 2 + q3 ** 2 + q4 ** 2
        Rotation_Matrix = Matrix([[1, 0, 0, 0],
                                  [0, q1 ** 2 + q2 ** 2 - q3 ** 2 - q4 ** 2, 2 * q2 * q3 - 2 * q1 * q4, 2 * q2 * q4 + 2 * q1 * q3],
                                  [0, 2 * q2 * q3 + 2 * q1 * q4, q1 ** 2 - q2 ** 2 + q3 ** 2 - q4 ** 2,2 * q3 * q4 - 2 * q1 * q2],
                                  [0, 2 * q2 * q4 - 2 * q1 * q3, 2 * q3 * q4 + 2 * q1 * q2,q1 ** 2 - q2 ** 2 - q3 ** 2 + q4 ** 2]])
        Output_Matrix = Rotation_Matrix*Input_Matrix/qmodel
        #wx2,wy2,wz2 = Output_Matrix.row(1),Output_Matrix.row(2),Output_Matrix.row(3)
        Output_Matrix.row_del(0)
        Output=Output_Matrix.row_insert(3,Matrix([1]))

        return Output,Matrix([x,y,z,q1,q2,q3,q4]),Output_Matrix

    def Transistion_Matrix(self):
        t,u,v = symbols('t,u,v')
        TMatrix = Matrix([[1,0,0,t],[0,1,0,u],[0,0,1,v],[0,0,0,1]])
        return TMatrix



if __name__ == '__main__':
    #state = Matrix[]
    wx, wy, wz, q1, q2, q3, q4 = symbols('wx,wy,wz,q1,q2,q3,q4 ')
    t,u,v = symbols('t,u,v')
    pr = ProjectAndRotate()
    RotateInput,OriginalInput,QMat = pr.Quaternion()
    TMatrix = pr.Transistion_Matrix()
    TMM = TMatrix.subs(t,0).subs(u,0).subs(v,50)
    PM = pr.ProjectionMatrix()
    theta = 30*math.pi/180
    q1_ = 2*math.cos(theta/2)
    q2_ = 0
    q3_ = 0
    q4_ = 2*math.sin(theta/2)
    t_,u_,v_ = 0,0,50
    q1o=1
    q2o=0
    q3o=0
    q4o=0
    to,uo,vo = 0,0,0
    wxo,wyo,wzo = 0,0,0
    wx_,wy_,wz_=50,50,50
    Input =Matrix([ wx_,wy_,wz_,1])
    RotateInput_R = RotateInput.subs(wx, wx_).subs(wy, wy_).subs(wz, wz_).subs(q1, q1_).subs(q2, q2_).subs(q3, q3_).subs(q4,q4_).evalf()
    RotateInput_NR = RotateInput.subs(wx, wxo).subs(wy, wyo).subs(wz, wzo).subs(q1, q1o).subs(q2, q2o).subs(q3, q3o).subs(q4,q4o).evalf()
    Out_NR = PM.T*TMatrix*RotateInput
    # Output_NR = Out_NR/Out_NR.row(3)
    # Out_R = PM.T * TMM * RotateInput_R
    # Output_R = Out_R/Out_R.row(3)
    print(Out_NR)
    # print(Output_R)

    # RotateInput = RotateInput.subs(wx, 5).subs(wy,  5).subs(wz, 1).subs(q1, q1_).subs(q2, q2_).subs(q3,q3_).subs(q4,q4_).evalf()
    # print(RotateInput)
    # print(TMatrix)
    # print(TMM)
    # print(TMM*RotateInput)
    # print(PM.T*TMM*RotateInput)
    #RotIn = np.array(RotateInput,dtype=float)
    # PM = pr.ProjectionMatrix()
    #PM = np.array(PM,dtype=float)
    # Out = PM.T*RotateInput
    # Out_Homo = Out/Out.row(3)
    # QMat = QMat.subs(q1,1).subs(q2,0).subs(q3,0).subs(q4,0).evalf()
    # Output= Out_Homo.subs(wx,10).subs(wy,10).subs(wz,50).subs(q1,1).subs(q2,0).subs(q3,0).subs(q4,0).evalf()
    # Out = Out.subs(wx,10).subs(wy,10).subs(wz,50).subs(q1,1).subs(q2,0).subs(q3,0).subs(q4,0).evalf()
    #Output = np.array(Out_Homo,dtype=float)
    #Out_Homo.jacobian()
    #print(RotateInput)
    #print(Output)
    #print(QMat)

    delta  = 0.00001
    numDif_q1 = (Out_NR.subs([(wx, 0), (wy, 0), (wz, 1),
                                               (q1, q1o+delta), (q2, q2o),
                                               (q3, q3o), (q4, q4o),(t,0),(u,0),(v,50)]) -Out_NR.subs([(wx, 0), (wy, 0), (wz, 1),
                                               (q1, q1o), (q2, q2o),
                                               (q3, q3o), (q4, q4o),(t,0),(u,0),(v,50)])) / delta
    numDif_q2 = (Out_NR.subs([(wx, 0), (wy, 0), (wz, 1),
                              (q1, q1o), (q2, q2o+ delta),
                              (q3, q3o), (q4, q4o), (t, 0), (u, 0), (v, 50)]) - Out_NR.subs([(wx, 0), (wy, 0), (wz, 1),
                                                                                             (q1, q1o), (q2, q2o),
                                                                                             (q3, q3o), (q4, q4o),
                                                                                             (t, 0), (u, 0),
                                                                                             (v, 50)])) / delta
    numDif_q3 = (Out_NR.subs([(wx, 0), (wy, 0), (wz, 1),
                              (q1, q1o), (q2, q2o),
                              (q3, q3o+ delta), (q4, q4o), (t, 0), (u, 0), (v, 50)]) - Out_NR.subs([(wx, 0), (wy, 0), (wz, 1),
                                                                                             (q1, q1o), (q2, q2o),
                                                                                             (q3, q3o), (q4, q4o),
                                                                                             (t, 0), (u, 0),
                                                                                             (v, 50)])) / delta

    numDif_q4 = (Out_NR.subs([(wx, 0), (wy, 0), (wz, 1),
                              (q1, q1o), (q2, q2o),
                              (q3, q3o ), (q4, q4o+ delta), (t, 0), (u, 0), (v, 50)]) - Out_NR.subs(
        [(wx, 0), (wy, 0), (wz, 1),
         (q1, q1o), (q2, q2o),
         (q3, q3o), (q4, q4o),
         (t, 0), (u, 0),
         (v, 50)])) / delta
    numDif_x = (Out_NR.subs([(wx, 0+ delta), (wy, 0), (wz, 1),
                              (q1, q1o), (q2, q2o),
                              (q3, q3o), (q4, q4o), (t, 0), (u, 0), (v, 50)]) - Out_NR.subs(
        [(wx, 0), (wy, 0), (wz, 1),
         (q1, q1o), (q2, q2o),
         (q3, q3o), (q4, q4o),
         (t, 0), (u, 0),
         (v, 50)])) / delta

    numDif_y = (Out_NR.subs([(wx, 0), (wy, 0+ delta), (wz, 1),
                             (q1, q1o), (q2, q2o),
                             (q3, q3o), (q4, q4o), (t, 0), (u, 0), (v, 50)]) - Out_NR.subs(
        [(wx, 0), (wy, 0), (wz, 1),
         (q1, q1o), (q2, q2o),
         (q3, q3o), (q4, q4o),
         (t, 0), (u, 0),
         (v, 50)])) / delta
    numDif_z = (Out_NR.subs([(wx, 0), (wy, 0), (wz, 1+ delta),
                             (q1, q1o), (q2, q2o),
                             (q3, q3o), (q4, q4o), (t, 0), (u, 0), (v, 50)]) - Out_NR.subs(
        [(wx, 0), (wy, 0), (wz, 1),
         (q1, q1o), (q2, q2o),
         (q3, q3o), (q4, q4o),
         (t, 0), (u, 0),
         (v, 50)])) / delta
    numDif_t = (Out_NR.subs([(wx, 0), (wy, 0), (wz, 1),
                             (q1, q1o), (q2, q2o),
                             (q3, q3o), (q4, q4o), (t, 0+ delta), (u, 0), (v, 50)]) - Out_NR.subs(
        [(wx, 0), (wy, 0), (wz, 1),
         (q1, q1o), (q2, q2o),
         (q3, q3o), (q4, q4o),
         (t, 0), (u, 0),
         (v, 50)])) / delta

    numDif_u = (Out_NR.subs([(wx, 0), (wy, 0), (wz, 1),
                             (q1, q1o), (q2, q2o),
                             (q3, q3o), (q4, q4o), (t, 0), (u, 0+ delta), (v, 50)]) - Out_NR.subs(
        [(wx, 0), (wy, 0), (wz, 1),
         (q1, q1o), (q2, q2o),
         (q3, q3o), (q4, q4o),
         (t, 0), (u, 0),
         (v, 50)])) / delta

    numDif_v = (Out_NR.subs([(wx, 0), (wy, 0), (wz, 1),
                             (q1, q1o), (q2, q2o),
                             (q3, q3o), (q4, q4o), (t, 0), (u, 0), (v, 50 + delta)]) - Out_NR.subs(
        [(wx, 0), (wy, 0), (wz, 1),
         (q1, q1o), (q2, q2o),
         (q3, q3o), (q4, q4o),
         (t, 0), (u, 0),
         (v, 50)])) / delta

    print(numDif_x.T)
    print(numDif_y.T)
    print(numDif_z.T)
    print(numDif_q1.T)
    print(numDif_q2.T)
    print(numDif_q3.T)
    print(numDif_q4.T)
    print(numDif_t.T )
    print(numDif_u.T)
    print(numDif_v.T)

    dev = Matrix([wx_-wxo,wy_-wyo,wz_-wzo,q1_-q1o,q2_-q2o,q3_-q3o,q4_-q4o,t_-to,u_-uo,v_-vo])
    wxd,wyd,wzd,q1d,q2d,q3d,q4d,td,ud,vd = dev[0:10]
    Jaco = Out_NR.jacobian([wx,wy,wz,q1,q2,q3,q4,t,u,v])
    # Jaco =Matrix([[-0.00377358490566038*(-2*q1*q3 + 2*q2*q4)*(1.70666666666667*t + 1.20754716981132*v + 1.20754716981132*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1.70666666666667*(wx*(q1**2 + q2**2 - q3**2 - q4**2) + wy*(-2*q1*q4 + 2*q2*q3) + wz*(2*q1*q3 + 2*q2*q4))/(q1**2 + q2**2 + q3**2 + q4**2) + 320.0)/((0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1)**2*(q1**2 + q2**2 + q3**2 + q4**2)) + (1.20754716981132*(-2*q1*q3 + 2*q2*q4)/(q1**2 + q2**2 + q3**2 + q4**2) + 1.70666666666667*(q1**2 + q2**2 - q3**2 - q4**2)/(q1**2 + q2**2 + q3**2 + q4**2))/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1), -0.00377358490566038*(2*q1*q2 + 2*q3*q4)*(1.70666666666667*t + 1.20754716981132*v + 1.20754716981132*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1.70666666666667*(wx*(q1**2 + q2**2 - q3**2 - q4**2) + wy*(-2*q1*q4 + 2*q2*q3) + wz*(2*q1*q3 + 2*q2*q4))/(q1**2 + q2**2 + q3**2 + q4**2) + 320.0)/((0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1)**2*(q1**2 + q2**2 + q3**2 + q4**2)) + (1.20754716981132*(2*q1*q2 + 2*q3*q4)/(q1**2 + q2**2 + q3**2 + q4**2) + 1.70666666666667*(-2*q1*q4 + 2*q2*q3)/(q1**2 + q2**2 + q3**2 + q4**2))/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1), (1.70666666666667*(2*q1*q3 + 2*q2*q4)/(q1**2 + q2**2 + q3**2 + q4**2) + 1.20754716981132*(q1**2 - q2**2 - q3**2 + q4**2)/(q1**2 + q2**2 + q3**2 + q4**2))/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1) - 0.00377358490566038*(q1**2 - q2**2 - q3**2 + q4**2)*(1.70666666666667*t + 1.20754716981132*v + 1.20754716981132*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1.70666666666667*(wx*(q1**2 + q2**2 - q3**2 - q4**2) + wy*(-2*q1*q4 + 2*q2*q3) + wz*(2*q1*q3 + 2*q2*q4))/(q1**2 + q2**2 + q3**2 + q4**2) + 320.0)/((0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1)**2*(q1**2 + q2**2 + q3**2 + q4**2)), (0.00754716981132075*q1*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2)**2 - 0.00377358490566038*(2*q1*wz + 2*q2*wy - 2*q3*wx)/(q1**2 + q2**2 + q3**2 + q4**2))*(1.70666666666667*t + 1.20754716981132*v + 1.20754716981132*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1.70666666666667*(wx*(q1**2 + q2**2 - q3**2 - q4**2) + wy*(-2*q1*q4 + 2*q2*q3) + wz*(2*q1*q3 + 2*q2*q4))/(q1**2 + q2**2 + q3**2 + q4**2) + 320.0)/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1)**2 + (-2.41509433962264*q1*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2)**2 - 3.41333333333333*q1*(wx*(q1**2 + q2**2 - q3**2 - q4**2) + wy*(-2*q1*q4 + 2*q2*q3) + wz*(2*q1*q3 + 2*q2*q4))/(q1**2 + q2**2 + q3**2 + q4**2)**2 + 1.70666666666667*(2*q1*wx + 2*q3*wz - 2*q4*wy)/(q1**2 + q2**2 + q3**2 + q4**2) + 1.20754716981132*(2*q1*wz + 2*q2*wy - 2*q3*wx)/(q1**2 + q2**2 + q3**2 + q4**2))/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1), (0.00754716981132075*q2*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2)**2 - 0.00377358490566038*(2*q1*wy - 2*q2*wz + 2*q4*wx)/(q1**2 + q2**2 + q3**2 + q4**2))*(1.70666666666667*t + 1.20754716981132*v + 1.20754716981132*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1.70666666666667*(wx*(q1**2 + q2**2 - q3**2 - q4**2) + wy*(-2*q1*q4 + 2*q2*q3) + wz*(2*q1*q3 + 2*q2*q4))/(q1**2 + q2**2 + q3**2 + q4**2) + 320.0)/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1)**2 + (-2.41509433962264*q2*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2)**2 - 3.41333333333333*q2*(wx*(q1**2 + q2**2 - q3**2 - q4**2) + wy*(-2*q1*q4 + 2*q2*q3) + wz*(2*q1*q3 + 2*q2*q4))/(q1**2 + q2**2 + q3**2 + q4**2)**2 + 1.20754716981132*(2*q1*wy - 2*q2*wz + 2*q4*wx)/(q1**2 + q2**2 + q3**2 + q4**2) + 1.70666666666667*(2*q2*wx + 2*q3*wy + 2*q4*wz)/(q1**2 + q2**2 + q3**2 + q4**2))/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1), (0.00754716981132075*q3*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2)**2 - 0.00377358490566038*(-2*q1*wx - 2*q3*wz + 2*q4*wy)/(q1**2 + q2**2 + q3**2 + q4**2))*(1.70666666666667*t + 1.20754716981132*v + 1.20754716981132*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1.70666666666667*(wx*(q1**2 + q2**2 - q3**2 - q4**2) + wy*(-2*q1*q4 + 2*q2*q3) + wz*(2*q1*q3 + 2*q2*q4))/(q1**2 + q2**2 + q3**2 + q4**2) + 320.0)/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1)**2 + (-2.41509433962264*q3*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2)**2 - 3.41333333333333*q3*(wx*(q1**2 + q2**2 - q3**2 - q4**2) + wy*(-2*q1*q4 + 2*q2*q3) + wz*(2*q1*q3 + 2*q2*q4))/(q1**2 + q2**2 + q3**2 + q4**2)**2 + 1.20754716981132*(-2*q1*wx - 2*q3*wz + 2*q4*wy)/(q1**2 + q2**2 + q3**2 + q4**2) + 1.70666666666667*(2*q1*wz + 2*q2*wy - 2*q3*wx)/(q1**2 + q2**2 + q3**2 + q4**2))/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1), (0.00754716981132075*q4*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2)**2 - 0.00377358490566038*(2*q2*wx + 2*q3*wy + 2*q4*wz)/(q1**2 + q2**2 + q3**2 + q4**2))*(1.70666666666667*t + 1.20754716981132*v + 1.20754716981132*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1.70666666666667*(wx*(q1**2 + q2**2 - q3**2 - q4**2) + wy*(-2*q1*q4 + 2*q2*q3) + wz*(2*q1*q3 + 2*q2*q4))/(q1**2 + q2**2 + q3**2 + q4**2) + 320.0)/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1)**2 + (-2.41509433962264*q4*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2)**2 - 3.41333333333333*q4*(wx*(q1**2 + q2**2 - q3**2 - q4**2) + wy*(-2*q1*q4 + 2*q2*q3) + wz*(2*q1*q3 + 2*q2*q4))/(q1**2 + q2**2 + q3**2 + q4**2)**2 + 1.70666666666667*(-2*q1*wy + 2*q2*wz - 2*q4*wx)/(q1**2 + q2**2 + q3**2 + q4**2) + 1.20754716981132*(2*q2*wx + 2*q3*wy + 2*q4*wz)/(q1**2 + q2**2 + q3**2 + q4**2))/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1), 1.70666666666667/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1), 0, 1.20754716981132/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1) - 0.00377358490566038*(1.70666666666667*t + 1.20754716981132*v + 1.20754716981132*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1.70666666666667*(wx*(q1**2 + q2**2 - q3**2 - q4**2) + wy*(-2*q1*q4 + 2*q2*q3) + wz*(2*q1*q3 + 2*q2*q4))/(q1**2 + q2**2 + q3**2 + q4**2) + 320.0)/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1)**2],
    #      [-0.00377358490566038*(-2*q1*q3 + 2*q2*q4)*(2.41206030150754*u + 0.905660377358491*v + 0.905660377358491*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 2.41206030150754*(wx*(2*q1*q4 + 2*q2*q3) + wy*(q1**2 - q2**2 + q3**2 - q4**2) + wz*(-2*q1*q2 + 2*q3*q4))/(q1**2 + q2**2 + q3**2 + q4**2) + 240.0)/((0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1)**2*(q1**2 + q2**2 + q3**2 + q4**2)) + (0.905660377358491*(-2*q1*q3 + 2*q2*q4)/(q1**2 + q2**2 + q3**2 + q4**2) + 2.41206030150754*(2*q1*q4 + 2*q2*q3)/(q1**2 + q2**2 + q3**2 + q4**2))/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1), -0.00377358490566038*(2*q1*q2 + 2*q3*q4)*(2.41206030150754*u + 0.905660377358491*v + 0.905660377358491*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 2.41206030150754*(wx*(2*q1*q4 + 2*q2*q3) + wy*(q1**2 - q2**2 + q3**2 - q4**2) + wz*(-2*q1*q2 + 2*q3*q4))/(q1**2 + q2**2 + q3**2 + q4**2) + 240.0)/((0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1)**2*(q1**2 + q2**2 + q3**2 + q4**2)) + (0.905660377358491*(2*q1*q2 + 2*q3*q4)/(q1**2 + q2**2 + q3**2 + q4**2) + 2.41206030150754*(q1**2 - q2**2 + q3**2 - q4**2)/(q1**2 + q2**2 + q3**2 + q4**2))/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1), (2.41206030150754*(-2*q1*q2 + 2*q3*q4)/(q1**2 + q2**2 + q3**2 + q4**2) + 0.905660377358491*(q1**2 - q2**2 - q3**2 + q4**2)/(q1**2 + q2**2 + q3**2 + q4**2))/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1) - 0.00377358490566038*(q1**2 - q2**2 - q3**2 + q4**2)*(2.41206030150754*u + 0.905660377358491*v + 0.905660377358491*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 2.41206030150754*(wx*(2*q1*q4 + 2*q2*q3) + wy*(q1**2 - q2**2 + q3**2 - q4**2) + wz*(-2*q1*q2 + 2*q3*q4))/(q1**2 + q2**2 + q3**2 + q4**2) + 240.0)/((0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1)**2*(q1**2 + q2**2 + q3**2 + q4**2)), (0.00754716981132075*q1*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2)**2 - 0.00377358490566038*(2*q1*wz + 2*q2*wy - 2*q3*wx)/(q1**2 + q2**2 + q3**2 + q4**2))*(2.41206030150754*u + 0.905660377358491*v + 0.905660377358491*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 2.41206030150754*(wx*(2*q1*q4 + 2*q2*q3) + wy*(q1**2 - q2**2 + q3**2 - q4**2) + wz*(-2*q1*q2 + 2*q3*q4))/(q1**2 + q2**2 + q3**2 + q4**2) + 240.0)/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1)**2 + (-1.81132075471698*q1*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2)**2 - 4.82412060301507*q1*(wx*(2*q1*q4 + 2*q2*q3) + wy*(q1**2 - q2**2 + q3**2 - q4**2) + wz*(-2*q1*q2 + 2*q3*q4))/(q1**2 + q2**2 + q3**2 + q4**2)**2 + 2.41206030150754*(2*q1*wy - 2*q2*wz + 2*q4*wx)/(q1**2 + q2**2 + q3**2 + q4**2) + 0.905660377358491*(2*q1*wz + 2*q2*wy - 2*q3*wx)/(q1**2 + q2**2 + q3**2 + q4**2))/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1), (0.00754716981132075*q2*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2)**2 - 0.00377358490566038*(2*q1*wy - 2*q2*wz + 2*q4*wx)/(q1**2 + q2**2 + q3**2 + q4**2))*(2.41206030150754*u + 0.905660377358491*v + 0.905660377358491*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 2.41206030150754*(wx*(2*q1*q4 + 2*q2*q3) + wy*(q1**2 - q2**2 + q3**2 - q4**2) + wz*(-2*q1*q2 + 2*q3*q4))/(q1**2 + q2**2 + q3**2 + q4**2) + 240.0)/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1)**2 + (-1.81132075471698*q2*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2)**2 - 4.82412060301507*q2*(wx*(2*q1*q4 + 2*q2*q3) + wy*(q1**2 - q2**2 + q3**2 - q4**2) + wz*(-2*q1*q2 + 2*q3*q4))/(q1**2 + q2**2 + q3**2 + q4**2)**2 + 0.905660377358491*(2*q1*wy - 2*q2*wz + 2*q4*wx)/(q1**2 + q2**2 + q3**2 + q4**2) + 2.41206030150754*(-2*q1*wz - 2*q2*wy + 2*q3*wx)/(q1**2 + q2**2 + q3**2 + q4**2))/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1), (0.00754716981132075*q3*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2)**2 - 0.00377358490566038*(-2*q1*wx - 2*q3*wz + 2*q4*wy)/(q1**2 + q2**2 + q3**2 + q4**2))*(2.41206030150754*u + 0.905660377358491*v + 0.905660377358491*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 2.41206030150754*(wx*(2*q1*q4 + 2*q2*q3) + wy*(q1**2 - q2**2 + q3**2 - q4**2) + wz*(-2*q1*q2 + 2*q3*q4))/(q1**2 + q2**2 + q3**2 + q4**2) + 240.0)/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1)**2 + (-1.81132075471698*q3*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2)**2 - 4.82412060301507*q3*(wx*(2*q1*q4 + 2*q2*q3) + wy*(q1**2 - q2**2 + q3**2 - q4**2) + wz*(-2*q1*q2 + 2*q3*q4))/(q1**2 + q2**2 + q3**2 + q4**2)**2 + 0.905660377358491*(-2*q1*wx - 2*q3*wz + 2*q4*wy)/(q1**2 + q2**2 + q3**2 + q4**2) + 2.41206030150754*(2*q2*wx + 2*q3*wy + 2*q4*wz)/(q1**2 + q2**2 + q3**2 + q4**2))/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1), (0.00754716981132075*q4*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2)**2 - 0.00377358490566038*(2*q2*wx + 2*q3*wy + 2*q4*wz)/(q1**2 + q2**2 + q3**2 + q4**2))*(2.41206030150754*u + 0.905660377358491*v + 0.905660377358491*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 2.41206030150754*(wx*(2*q1*q4 + 2*q2*q3) + wy*(q1**2 - q2**2 + q3**2 - q4**2) + wz*(-2*q1*q2 + 2*q3*q4))/(q1**2 + q2**2 + q3**2 + q4**2) + 240.0)/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1)**2 + (-1.81132075471698*q4*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2)**2 - 4.82412060301507*q4*(wx*(2*q1*q4 + 2*q2*q3) + wy*(q1**2 - q2**2 + q3**2 - q4**2) + wz*(-2*q1*q2 + 2*q3*q4))/(q1**2 + q2**2 + q3**2 + q4**2)**2 + 2.41206030150754*(2*q1*wx + 2*q3*wz - 2*q4*wy)/(q1**2 + q2**2 + q3**2 + q4**2) + 0.905660377358491*(2*q2*wx + 2*q3*wy + 2*q4*wz)/(q1**2 + q2**2 + q3**2 + q4**2))/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1), 0, 2.41206030150754/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1), 0.905660377358491/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1) - 0.00377358490566038*(2.41206030150754*u + 0.905660377358491*v + 0.905660377358491*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 2.41206030150754*(wx*(2*q1*q4 + 2*q2*q3) + wy*(q1**2 - q2**2 + q3**2 - q4**2) + wz*(-2*q1*q2 + 2*q3*q4))/(q1**2 + q2**2 + q3**2 + q4**2) + 240.0)/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1)**2]])
    HJ=Jaco.subs(wx, 0).subs(wy, 0).subs(wz, 1).subs(q1, q1o).subs(q2, q2o).subs(q3, q3o).subs(q4,q4o).subs(t,0).subs(u,0).subs(v,50).evalf()
    #out = Out_NR.subs(wx, wxo).subs(wy, wyo).subs(wz, wzo).subs(q1, q1o).subs(q2, q2o).subs(q3, q3o).subs(q4,q4o).subs(t,to).subs(u,uo).subs(v,vo).evalf()
    h=Matrix([[(1.70666666666667*t + 1.20754716981132*v + 1.20754716981132*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1.70666666666667*(wx*(q1**2 + q2**2 - q3**2 - q4**2) + wy*(-2*q1*q4 + 2*q2*q3) + wz*(2*q1*q3 + 2*q2*q4))/(q1**2 + q2**2 + q3**2 + q4**2) + 320.0)/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1)], [(2.41206030150754*u + 0.905660377358491*v + 0.905660377358491*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 2.41206030150754*(wx*(2*q1*q4 + 2*q2*q3) + wy*(q1**2 - q2**2 + q3**2 - q4**2) + wz*(-2*q1*q2 + 2*q3*q4))/(q1**2 + q2**2 + q3**2 + q4**2) + 240.0)/(0.00377358490566038*v + 0.00377358490566038*(wx*(-2*q1*q3 + 2*q2*q4) + wy*(2*q1*q2 + 2*q3*q4) + wz*(q1**2 - q2**2 - q3**2 + q4**2))/(q1**2 + q2**2 + q3**2 + q4**2) + 1)]])
    print(HJ.T)
    print(Jaco)
    print(Out_NR)
