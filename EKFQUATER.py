from filterpy.common import Q_discrete_white_noise
from filterpy.kalman import ExtendedKalmanFilter
from numpy import eye, array, asarray
import numpy as np
from sympy import*

class EKFQ:
    def __init__(self):
        self.rk = ExtendedKalmanFilter(dim_x=7, dim_z=2)
        self.wx = 0
        self.wy = 0
        self.wz = 265
        self.q1 = 1
        self.q2 = 0
        self.q3 = 0
        self.q4 = 0
        #range_std = 5000
        self.rk.R = np.diag([300,500])
        self.rk.Q = np.diag([50,50,50,50,0.1,0.1,0.1])
        self.rk.P *= 50
        self.rk.x = np.array([[self.q1,self.q2,self.q3,self.q4,self.wx,self.wy,self.wz]]).T
    def start(self,zx,zy):
        try:
            self.rk.predict_update(np.array([[zx],[zy]]),self.HJaco,self.Hs)
        except ValueError:
            self.rk.update(np.array([zx+np.random.random()*5,zy+np.random.random()*5]),self.HJaco,self.Hs)
            pass
        self.rk.x[0:4] = self.rk.x[0:4] / np.dot(self.rk.x[0:4].T, self.rk.x[0:4])
        #fx = self.rk.x.flatten()
        #self.rk.predict()
        ix, iy = self.Hs(self.rk.x)
        q1_,q2_,q3_,q4_,wx_, wy_, wz_ = self.rk.x[0:7]
        yaw = np.arctan2(2 * (q2_ * q3_ + q1_ * q4_), (1 - 2 * (q3_ ** 2 + q4_ ** 2)))
        pitch = np.arcsin(-2 * (q1_ * q3_ + q2_ * q4_))
        return ix, iy, wz_,q1_,q2_,q3_,q4_,wx_,wy_,yaw,pitch

    # def calP(self,wx,wy,wz):
    #     pixel_x = 640
    #     pixel_y = 480
    #     span_x = 375  # 280mm
    #     span_y = 199  # 177mm
    #     D = 265  # Camera distance z = -475mm
    #     Projection_Matrix = np.array([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 1 / D], [0, 0, -D, 1]])
    #     Pixel_Transform_Matrix = np.array([[pixel_x / span_x, 0, 0, 0], [0, pixel_y / span_y, 0, 0], [0, 0, 1, 0], [pixel_x / 2, pixel_y / 2, 0, 1]])
    #     Whole_Matrix= np.dot(Projection_Matrix,Pixel_Transform_Matrix)
    #     Input = np.array([[wx,wy,wz,1]]).T
    #     Trans_Mat = np.array([[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]])
    #     Trans_input = np.dot(Trans_Mat,Input)
    #     Output = np.dot(Whole_Matrix.T,Trans_input)
    #     Output = Output / Output[3,0]
    #     return Output[0,0],Output[1,0]

    def HJaco (self,state):
        state = state.flatten()
        q0,q1,q2,q3,x,y,z = state[0:7]
        D=265
        px = 640
        py = 480
        rx =375
        ry = 199
        q0,q1,q2,q3= np.array([q0,q1,q2,q3])/(q0**2+q1**2+q2**2+q3**2)
        hj = np.array([[D*(px*(x*(q0**2 + q1**2 - q2**2 - q3**2) + y*(-2*q0*q3 + 2*q1*q2) + z*(2*q0*q2 + 2*q1*q3))/rx + px*(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))/(2*D))*(-x*(4*q0**2*q2 - 4*q0*q1*q3 - 2*q2) - y*(-4*q0**2*q1 - 4*q0*q2*q3 + 2*q1) - z*(-2*q0**3 + 2*q0*q1**2 + 2*q0*q2**2 - 2*q0*q3**2 + 2*q0))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))**2 + D*(px*(x*(-2*q0**3 - 2*q0*q1**2 + 2*q0*q2**2 + 2*q0*q3**2 + 2*q0) + y*(4*q0**2*q3 - 4*q0*q1*q2 - 2*q3) + z*(-4*q0**2*q2 - 4*q0*q1*q3 + 2*q2))/rx + px*(x*(4*q0**2*q2 - 4*q0*q1*q3 - 2*q2) + y*(-4*q0**2*q1 - 4*q0*q2*q3 + 2*q1) + z*(-2*q0**3 + 2*q0*q1**2 + 2*q0*q2**2 - 2*q0*q3**2 + 2*q0))/(2*D))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2)), D*(py*(x*(2*q0*q3 + 2*q1*q2) + y*(q0**2 - q1**2 + q2**2 - q3**2) + z*(-2*q0*q1 + 2*q2*q3))/ry + py*(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))/(2*D))*(-x*(4*q0**2*q2 - 4*q0*q1*q3 - 2*q2) - y*(-4*q0**2*q1 - 4*q0*q2*q3 + 2*q1) - z*(-2*q0**3 + 2*q0*q1**2 + 2*q0*q2**2 - 2*q0*q3**2 + 2*q0))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))**2 + D*(py*(x*(-4*q0**2*q3 - 4*q0*q1*q2 + 2*q3) + y*(-2*q0**3 + 2*q0*q1**2 - 2*q0*q2**2 + 2*q0*q3**2 + 2*q0) + z*(4*q0**2*q1 - 4*q0*q2*q3 - 2*q1))/ry + py*(x*(4*q0**2*q2 - 4*q0*q1*q3 - 2*q2) + y*(-4*q0**2*q1 - 4*q0*q2*q3 + 2*q1) + z*(-2*q0**3 + 2*q0*q1**2 + 2*q0*q2**2 - 2*q0*q3**2 + 2*q0))/(2*D))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2)), D*(x*(4*q0**2*q2 - 4*q0*q1*q3 - 2*q2) + y*(-4*q0**2*q1 - 4*q0*q2*q3 + 2*q1) + z*(-2*q0**3 + 2*q0*q1**2 + 2*q0*q2**2 - 2*q0*q3**2 + 2*q0))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2)) + D*(-x*(4*q0**2*q2 - 4*q0*q1*q3 - 2*q2) - y*(-4*q0**2*q1 - 4*q0*q2*q3 + 2*q1) - z*(-2*q0**3 + 2*q0*q1**2 + 2*q0*q2**2 - 2*q0*q3**2 + 2*q0))*(-D + x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))**2], [D*(px*(x*(q0**2 + q1**2 - q2**2 - q3**2) + y*(-2*q0*q3 + 2*q1*q2) + z*(2*q0*q2 + 2*q1*q3))/rx + px*(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))/(2*D))*(-x*(4*q0*q1*q2 - 4*q1**2*q3 + 2*q3) - y*(-4*q0*q1**2 + 2*q0 - 4*q1*q2*q3) - z*(-2*q0**2*q1 + 2*q1**3 + 2*q1*q2**2 - 2*q1*q3**2 - 2*q1))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))**2 + D*(px*(x*(-2*q0**2*q1 - 2*q1**3 + 2*q1*q2**2 + 2*q1*q3**2 + 2*q1) + y*(4*q0*q1*q3 - 4*q1**2*q2 + 2*q2) + z*(-4*q0*q1*q2 - 4*q1**2*q3 + 2*q3))/rx + px*(x*(4*q0*q1*q2 - 4*q1**2*q3 + 2*q3) + y*(-4*q0*q1**2 + 2*q0 - 4*q1*q2*q3) + z*(-2*q0**2*q1 + 2*q1**3 + 2*q1*q2**2 - 2*q1*q3**2 - 2*q1))/(2*D))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2)), D*(py*(x*(2*q0*q3 + 2*q1*q2) + y*(q0**2 - q1**2 + q2**2 - q3**2) + z*(-2*q0*q1 + 2*q2*q3))/ry + py*(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))/(2*D))*(-x*(4*q0*q1*q2 - 4*q1**2*q3 + 2*q3) - y*(-4*q0*q1**2 + 2*q0 - 4*q1*q2*q3) - z*(-2*q0**2*q1 + 2*q1**3 + 2*q1*q2**2 - 2*q1*q3**2 - 2*q1))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))**2 + D*(py*(x*(-4*q0*q1*q3 - 4*q1**2*q2 + 2*q2) + y*(-2*q0**2*q1 + 2*q1**3 - 2*q1*q2**2 + 2*q1*q3**2 - 2*q1) + z*(4*q0*q1**2 - 2*q0 - 4*q1*q2*q3))/ry + py*(x*(4*q0*q1*q2 - 4*q1**2*q3 + 2*q3) + y*(-4*q0*q1**2 + 2*q0 - 4*q1*q2*q3) + z*(-2*q0**2*q1 + 2*q1**3 + 2*q1*q2**2 - 2*q1*q3**2 - 2*q1))/(2*D))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2)), D*(x*(4*q0*q1*q2 - 4*q1**2*q3 + 2*q3) + y*(-4*q0*q1**2 + 2*q0 - 4*q1*q2*q3) + z*(-2*q0**2*q1 + 2*q1**3 + 2*q1*q2**2 - 2*q1*q3**2 - 2*q1))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2)) + D*(-x*(4*q0*q1*q2 - 4*q1**2*q3 + 2*q3) - y*(-4*q0*q1**2 + 2*q0 - 4*q1*q2*q3) - z*(-2*q0**2*q1 + 2*q1**3 + 2*q1*q2**2 - 2*q1*q3**2 - 2*q1))*(-D + x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))**2], [D*(px*(x*(q0**2 + q1**2 - q2**2 - q3**2) + y*(-2*q0*q3 + 2*q1*q2) + z*(2*q0*q2 + 2*q1*q3))/rx + px*(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))/(2*D))*(-x*(4*q0*q2**2 - 2*q0 - 4*q1*q2*q3) - y*(-4*q0*q1*q2 - 4*q2**2*q3 + 2*q3) - z*(-2*q0**2*q2 + 2*q1**2*q2 + 2*q2**3 - 2*q2*q3**2 - 2*q2))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))**2 + D*(px*(x*(-2*q0**2*q2 - 2*q1**2*q2 + 2*q2**3 + 2*q2*q3**2 - 2*q2) + y*(4*q0*q2*q3 - 4*q1*q2**2 + 2*q1) + z*(-4*q0*q2**2 + 2*q0 - 4*q1*q2*q3))/rx + px*(x*(4*q0*q2**2 - 2*q0 - 4*q1*q2*q3) + y*(-4*q0*q1*q2 - 4*q2**2*q3 + 2*q3) + z*(-2*q0**2*q2 + 2*q1**2*q2 + 2*q2**3 - 2*q2*q3**2 - 2*q2))/(2*D))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2)), D*(py*(x*(2*q0*q3 + 2*q1*q2) + y*(q0**2 - q1**2 + q2**2 - q3**2) + z*(-2*q0*q1 + 2*q2*q3))/ry + py*(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))/(2*D))*(-x*(4*q0*q2**2 - 2*q0 - 4*q1*q2*q3) - y*(-4*q0*q1*q2 - 4*q2**2*q3 + 2*q3) - z*(-2*q0**2*q2 + 2*q1**2*q2 + 2*q2**3 - 2*q2*q3**2 - 2*q2))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))**2 + D*(py*(x*(-4*q0*q2*q3 - 4*q1*q2**2 + 2*q1) + y*(-2*q0**2*q2 + 2*q1**2*q2 - 2*q2**3 + 2*q2*q3**2 + 2*q2) + z*(4*q0*q1*q2 - 4*q2**2*q3 + 2*q3))/ry + py*(x*(4*q0*q2**2 - 2*q0 - 4*q1*q2*q3) + y*(-4*q0*q1*q2 - 4*q2**2*q3 + 2*q3) + z*(-2*q0**2*q2 + 2*q1**2*q2 + 2*q2**3 - 2*q2*q3**2 - 2*q2))/(2*D))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2)), D*(x*(4*q0*q2**2 - 2*q0 - 4*q1*q2*q3) + y*(-4*q0*q1*q2 - 4*q2**2*q3 + 2*q3) + z*(-2*q0**2*q2 + 2*q1**2*q2 + 2*q2**3 - 2*q2*q3**2 - 2*q2))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2)) + D*(-x*(4*q0*q2**2 - 2*q0 - 4*q1*q2*q3) - y*(-4*q0*q1*q2 - 4*q2**2*q3 + 2*q3) - z*(-2*q0**2*q2 + 2*q1**2*q2 + 2*q2**3 - 2*q2*q3**2 - 2*q2))*(-D + x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))**2], [D*(px*(x*(q0**2 + q1**2 - q2**2 - q3**2) + y*(-2*q0*q3 + 2*q1*q2) + z*(2*q0*q2 + 2*q1*q3))/rx + px*(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))/(2*D))*(-x*(4*q0*q2*q3 - 4*q1*q3**2 + 2*q1) - y*(-4*q0*q1*q3 - 4*q2*q3**2 + 2*q2) - z*(-2*q0**2*q3 + 2*q1**2*q3 + 2*q2**2*q3 - 2*q3**3 + 2*q3))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))**2 + D*(px*(x*(-2*q0**2*q3 - 2*q1**2*q3 + 2*q2**2*q3 + 2*q3**3 - 2*q3) + y*(4*q0*q3**2 - 2*q0 - 4*q1*q2*q3) + z*(-4*q0*q2*q3 - 4*q1*q3**2 + 2*q1))/rx + px*(x*(4*q0*q2*q3 - 4*q1*q3**2 + 2*q1) + y*(-4*q0*q1*q3 - 4*q2*q3**2 + 2*q2) + z*(-2*q0**2*q3 + 2*q1**2*q3 + 2*q2**2*q3 - 2*q3**3 + 2*q3))/(2*D))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2)), D*(py*(x*(2*q0*q3 + 2*q1*q2) + y*(q0**2 - q1**2 + q2**2 - q3**2) + z*(-2*q0*q1 + 2*q2*q3))/ry + py*(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))/(2*D))*(-x*(4*q0*q2*q3 - 4*q1*q3**2 + 2*q1) - y*(-4*q0*q1*q3 - 4*q2*q3**2 + 2*q2) - z*(-2*q0**2*q3 + 2*q1**2*q3 + 2*q2**2*q3 - 2*q3**3 + 2*q3))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))**2 + D*(py*(x*(-4*q0*q3**2 + 2*q0 - 4*q1*q2*q3) + y*(-2*q0**2*q3 + 2*q1**2*q3 - 2*q2**2*q3 + 2*q3**3 - 2*q3) + z*(4*q0*q1*q3 - 4*q2*q3**2 + 2*q2))/ry + py*(x*(4*q0*q2*q3 - 4*q1*q3**2 + 2*q1) + y*(-4*q0*q1*q3 - 4*q2*q3**2 + 2*q2) + z*(-2*q0**2*q3 + 2*q1**2*q3 + 2*q2**2*q3 - 2*q3**3 + 2*q3))/(2*D))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2)), D*(x*(4*q0*q2*q3 - 4*q1*q3**2 + 2*q1) + y*(-4*q0*q1*q3 - 4*q2*q3**2 + 2*q2) + z*(-2*q0**2*q3 + 2*q1**2*q3 + 2*q2**2*q3 - 2*q3**3 + 2*q3))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2)) + D*(-x*(4*q0*q2*q3 - 4*q1*q3**2 + 2*q1) - y*(-4*q0*q1*q3 - 4*q2*q3**2 + 2*q2) - z*(-2*q0**2*q3 + 2*q1**2*q3 + 2*q2**2*q3 - 2*q3**3 + 2*q3))*(-D + x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))**2], [D*(2.0*q0*q2 - 2.0*q1*q3)*(px*(x*(q0**2 + q1**2 - q2**2 - q3**2) + y*(-2*q0*q3 + 2*q1*q2) + z*(2*q0*q2 + 2*q1*q3))/rx + px*(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))/(2*D))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))**2 + D*(px*(q0**2 + q1**2 - q2**2 - q3**2)/rx + px*(-2.0*q0*q2 + 2.0*q1*q3)/(2*D))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2)), D*(2.0*q0*q2 - 2.0*q1*q3)*(py*(x*(2*q0*q3 + 2*q1*q2) + y*(q0**2 - q1**2 + q2**2 - q3**2) + z*(-2*q0*q1 + 2*q2*q3))/ry + py*(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))/(2*D))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))**2 + D*(py*(2.0*q0*q3 + 2.0*q1*q2)/ry + py*(-2.0*q0*q2 + 2.0*q1*q3)/(2*D))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2)), D*(-2.0*q0*q2 + 2.0*q1*q3)/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2)) + D*(2.0*q0*q2 - 2.0*q1*q3)*(-D + x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))**2], [D*(-2.0*q0*q1 - 2.0*q2*q3)*(px*(x*(q0**2 + q1**2 - q2**2 - q3**2) + y*(-2*q0*q3 + 2*q1*q2) + z*(2*q0*q2 + 2*q1*q3))/rx + px*(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))/(2*D))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))**2 + D*(px*(-2.0*q0*q3 + 2.0*q1*q2)/rx + px*(2.0*q0*q1 + 2.0*q2*q3)/(2*D))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2)), D*(-2.0*q0*q1 - 2.0*q2*q3)*(py*(x*(2*q0*q3 + 2*q1*q2) + y*(q0**2 - q1**2 + q2**2 - q3**2) + z*(-2*q0*q1 + 2*q2*q3))/ry + py*(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))/(2*D))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))**2 + D*(py*(q0**2 - q1**2 + q2**2 - q3**2)/ry + py*(2.0*q0*q1 + 2.0*q2*q3)/(2*D))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2)), D*(-2.0*q0*q1 - 2.0*q2*q3)*(-D + x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))**2 + D*(2.0*q0*q1 + 2.0*q2*q3)/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))], [D*(px*(2.0*q0*q2 + 2.0*q1*q3)/rx + px*(q0**2 - q1**2 - q2**2 + q3**2)/(2*D))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2)) + D*(px*(x*(q0**2 + q1**2 - q2**2 - q3**2) + y*(-2*q0*q3 + 2*q1*q2) + z*(2*q0*q2 + 2*q1*q3))/rx + px*(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))/(2*D))*(-q0**2 + q1**2 + q2**2 - q3**2)/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))**2, D*(py*(-2.0*q0*q1 + 2.0*q2*q3)/ry + py*(q0**2 - q1**2 - q2**2 + q3**2)/(2*D))/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2)) + D*(py*(x*(2*q0*q3 + 2*q1*q2) + y*(q0**2 - q1**2 + q2**2 - q3**2) + z*(-2*q0*q1 + 2*q2*q3))/ry + py*(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))/(2*D))*(-q0**2 + q1**2 + q2**2 - q3**2)/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))**2, D*(q0**2 - q1**2 - q2**2 + q3**2)/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2)) + D*(-D + x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))*(-q0**2 + q1**2 + q2**2 - q3**2)/(x*(-2*q0*q2 + 2*q1*q3) + y*(2*q0*q1 + 2*q2*q3) + z*(q0**2 - q1**2 - q2**2 + q3**2))**2]])
        #hj[0:4,:] = 0
        #hj[1,:]=0
        hj = hj[:,0:2].T
        return hj
    def Hs(self,state):
        state = state.flatten()
        q0,q1,q2,q3,x,y,z= state[0:7]
        D = 265
        px = 640
        py = 480
        rx = 375
        ry = 199
        hx = np.array([[D*(px*(1.0*x*(q0**2/(q0**2 + q1**2 + q2**2 + q3**2) + q1**2/(q0**2 + q1**2 + q2**2 + q3**2) - q2**2/(q0**2 + q1**2 + q2**2 + q3**2) - q3**2/(q0**2 + q1**2 + q2**2 + q3**2)) + 1.0*y*(-2*q0*q3/(q0**2 + q1**2 + q2**2 + q3**2) + 2*q1*q2/(q0**2 + q1**2 + q2**2 + q3**2)) + 1.0*z*(2*q0*q2/(q0**2 + q1**2 + q2**2 + q3**2) + 2*q1*q3/(q0**2 + q1**2 + q2**2 + q3**2)))/rx + px*(1.0*x*(-2*q0*q2/(q0**2 + q1**2 + q2**2 + q3**2) + 2*q1*q3/(q0**2 + q1**2 + q2**2 + q3**2)) + 1.0*y*(2*q0*q1/(q0**2 + q1**2 + q2**2 + q3**2) + 2*q2*q3/(q0**2 + q1**2 + q2**2 + q3**2)) + 1.0*z*(q0**2/(q0**2 + q1**2 + q2**2 + q3**2) - q1**2/(q0**2 + q1**2 + q2**2 + q3**2) - q2**2/(q0**2 + q1**2 + q2**2 + q3**2) + q3**2/(q0**2 + q1**2 + q2**2 + q3**2)))/(2*D))/(1.0*x*(-2*q0*q2/(q0**2 + q1**2 + q2**2 + q3**2) + 2*q1*q3/(q0**2 + q1**2 + q2**2 + q3**2)) + 1.0*y*(2*q0*q1/(q0**2 + q1**2 + q2**2 + q3**2) + 2*q2*q3/(q0**2 + q1**2 + q2**2 + q3**2)) + 1.0*z*(q0**2/(q0**2 + q1**2 + q2**2 + q3**2) - q1**2/(q0**2 + q1**2 + q2**2 + q3**2) - q2**2/(q0**2 + q1**2 + q2**2 + q3**2) + q3**2/(q0**2 + q1**2 + q2**2 + q3**2)))], [D*(py*(1.0*x*(2*q0*q3/(q0**2 + q1**2 + q2**2 + q3**2) + 2*q1*q2/(q0**2 + q1**2 + q2**2 + q3**2)) + 1.0*y*(q0**2/(q0**2 + q1**2 + q2**2 + q3**2) - q1**2/(q0**2 + q1**2 + q2**2 + q3**2) + q2**2/(q0**2 + q1**2 + q2**2 + q3**2) - q3**2/(q0**2 + q1**2 + q2**2 + q3**2)) + 1.0*z*(-2*q0*q1/(q0**2 + q1**2 + q2**2 + q3**2) + 2*q2*q3/(q0**2 + q1**2 + q2**2 + q3**2)))/ry + py*(1.0*x*(-2*q0*q2/(q0**2 + q1**2 + q2**2 + q3**2) + 2*q1*q3/(q0**2 + q1**2 + q2**2 + q3**2)) + 1.0*y*(2*q0*q1/(q0**2 + q1**2 + q2**2 + q3**2) + 2*q2*q3/(q0**2 + q1**2 + q2**2 + q3**2)) + 1.0*z*(q0**2/(q0**2 + q1**2 + q2**2 + q3**2) - q1**2/(q0**2 + q1**2 + q2**2 + q3**2) - q2**2/(q0**2 + q1**2 + q2**2 + q3**2) + q3**2/(q0**2 + q1**2 + q2**2 + q3**2)))/(2*D))/(1.0*x*(-2*q0*q2/(q0**2 + q1**2 + q2**2 + q3**2) + 2*q1*q3/(q0**2 + q1**2 + q2**2 + q3**2)) + 1.0*y*(2*q0*q1/(q0**2 + q1**2 + q2**2 + q3**2) + 2*q2*q3/(q0**2 + q1**2 + q2**2 + q3**2)) + 1.0*z*(q0**2/(q0**2 + q1**2 + q2**2 + q3**2)))]])
        hx = hx[:, 0:2]
        return hx
